<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[HTML5和CSS3的新特性（二）]]></title>
    <url>%2F2019%2F08%2F14%2FHTML5%E5%92%8CCSS3%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7(%E4%BA%8C)%2F</url>
    <content type="text"><![CDATA[勤劳远比黄金可贵。 1. CSS3 选择器 选择器 示例 说明 element1~element2 p~ul 选择p元素之后的每一个 ul 元素 [attribute^=value] a[src^=”https”] 选择每一个src属性的值以”https”开头的元素 [attribute$=value] a[src$=”.jpg”] 选择每一个src属性的值以”.jpg”结尾的元素 [attribute = value* ] a[src*=”44lan”] 选择每一个src属性的值包含子字符串”44lan”的元素 :first-of-type p:first-of-type 选择每个p元素是其父级的第一个p元素 :last-of-type p:last-of-type 选择每个p元素是其父级的最后一个p元素 :only-child p:only-child 选择每个p元素是其父级的唯一子元素 :nth-child(n) p:nth-child(2) 选择每个p元素是其父级的第二个子元素 :last-child p:last-child 选择每个p元素是其父级的最后一个子级。 :root :root 选择文档的根元素 :empty p:empty 选择每个没有任何子级的p元素（包括文本节点） :enabled input:enabled 选择每一个已启用的输入元素 :disabled input:disabled 选择每一个禁用的输入元素 :checked input:checked 选择每个选中的输入元素 :not(selector) :not(p) 选择每个并非p元素的元素 :out-of-range :out-of-range 匹配值在指定区间之外的input元素 :in-range :in-range 匹配值在指定区间之内的input元素 :optional :optional 用于匹配可选的输入元素 :valid :valid 用于匹配输入值为合法的元素 :invalid :invalid 用于匹配输入值为非法的元素 2. CSS3 边框（Borders）]]></content>
      <categories>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML5和CSS3的新特性(一)]]></title>
    <url>%2F2019%2F08%2F13%2FHTML5%E5%92%8CCSS3%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7(%E4%B8%80)%2F</url>
    <content type="text"><![CDATA[别再问我工作何必这么拼，我之所以这么努力，因为我想要的生活比你的贵。 1. HTML5 新标签 标签 描述 article 定义页面独立的内容区域。 aside 定义页面的侧边栏内容。 header 定义了文档的头部区域。 nav 定义导航链接的部分。 footer 定义文档的页脚。 mark 定义带有记号的文本。 progress 定义任何类型的任务的进度。 meter 定义度量值。 section 定义文档中的区段。 wbr 规定文本换行位置，以防长单词在错误位置换行。 2. HTML5 Canvas HTML5 canvas 元素用于图形的绘制，通过脚本 (通常是JavaScript)来完成。 HTML5 canvas 标签只是图形容器，您必须使用脚本来绘制图形。 使用 JavaScript 来绘制图像 canvas 元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成。 具体使用方法，在后续中会有讲到。 3. HTML5 拖放 拖放是一种常见的特性，即抓取对象以后拖到另一个位置。在 HTML5 中，拖放是标准的一部分，任何元素都能够拖放。 设置元素为可拖放，把 draggable 属性设置为 true 。如： 拖动什么 - ondragstart 和 setData()；放到何处 - ondragover；进行放置 - ondrop 4. HTML5地理位置 HTML5 Geolocation API 用于获得用户的地理位置。 鉴于该特性可能侵犯用户的隐私，除非用户同意，否则用户位置信息是不可用的。 5. HTML5 Audio(音频)和Video(视频)Audio/Video 属性 注：这里只说常用的并且目前大部分PC端浏览器支持的属性。其余的不做介绍。 属性 值 描述 autoplay autoplay 该属性可以让音频/视频在就绪后马上播放。 controls controls 该属性向用户显示控件，比如播放按钮。 muted Booleans 设置音频/视频是否应该被静音。 paused Booleans 设置音频/视频是否已暂停。 preload preload 该属性音频/视频在页面加载时进行加载，并预备播放。如果使用 autoplay，则忽略该属性。 src url 要播放的音频/视频的 URL。 loop loop 当音频/视频文件完成播放后再次开始播放。即循环播放。 currentTime seconds 设置或返回音频/视频中的当前播放位置（以秒计）。常用来设置前进后退x秒。 volume Num 规定音频/视频的当前音量。必须是介于 0.0 与 1.0 之间的数字。 playbackRate Num 指示音频/视频的当前播放速度。 6. HTML5 Input 类型 HTML5 拥有多个新的表单输入类型。这些新特性提供了更好的输入控制和验证。 表单类型 常用属性、值 描述 date date 选取日、月、年。 datetime date 选取时间、日、月、年（UTC 时间）。 datetime-local date 选取时间、日、月、年（本地时间）。 month date 选取月、年。 week date 选取周和年。 time time 选取时间（小时和分钟）。 email - - 用于应该包含 e-mail 地址的输入域。 number min:最小值(可选),max最大值(可选) 用于应该包含数值的输入域。 range min:滑动条最小值,max滑动条最大值 用于应该包含一定范围内数字值的输入域，显示为滑动条。 search 任意值 用于搜索域，比如站点搜索或 Google 搜索。 tel Num 用于输入电话号码类型。 url URL 用于应该包含 URL 地址的输入域。 7. HTML5 表单元素 HTML5 有以下新的表单元素。 标签 描述 datalist 定义选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。 keygen 规定用于表单的密钥对生成器字段。 output 定义不同类型的输出，比如脚本的输出。 注：以上三个表单元素目前大多PC端浏览器都不支持。 8. HTML5 表单属性 HTML5 的 form 和 input 标签添加了几个新属性. form 新属性： ​ autocomplete、novalidate input 新属性： ​ autocomplete、autofocus、form、formaction、formenctype、formmethod、formnovalidate、formtarget、height and width、list、min and max、multiple、pattern (regexp)、placeholder、required、step 9. HTML5 语义元素 HTML5提供了新的语义元素来明确一个Web页面的不同部分: 标签 描述 header 标题 nav 导航 section 节、部分 article 文章、内容 aside 侧边栏 figcaption 图片标题 figure 图片、代码的容器 footer 底栏、页脚 10. HTML5 Web 存储 Web Storage DOM API 为Web应用提供了一个能够替代cookie的Javascript解决方案 sessionStorage—客户端数据存储，只能维持在当前会话范围内。 sessionStorage 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。 localStorage—客户端数据存储，能维持在多个会话范围内。 localStorage 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。 对于大量复杂数据结构，一般使用IndexDB 11. HTML5 离线Web应用（应用程序缓存） HTML5 引入了应用程序缓存，这意味着 web 应用可进行缓存，并可在没有因特网连接时进行访问。 应用程序缓存为应用带来三个优势： 1. 离线浏览 - 用户可在应用离线时使用它们。 2. 速度 - 已缓存资源加载得更快。 3. 减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源。 HTML5 Cache Manifest 实例 下面的例子展示了带有 cache manifest 的 HTML 文档（供离线浏览） 123456&lt;!DOCTYPE HTML&gt;&lt;html manifest="demo.appcache"&gt;&lt;body&gt; The content of the document......&lt;/body&gt;&lt;/html&gt; Manifest 文件 manifest 文件是简单的文本文件，它告知浏览器被缓存的内容（以及不缓存的内容）。 manifest 文件可分为三个部分： CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存 NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存 FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面） 12345678910111213CACHE MANIFEST# 2012-02-21 v1.0.0/theme.css/logo.gif/main.jsNETWORK:login.aspFALLBACK:/html5/ /404.html 12. HTML5 Web Workers 当在 HTML 页面中执行脚本时，页面的状态是不可响应的，直到脚本已完成。 web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行。（相当于实现多线程并发） 13. HTML5 SSE Server-Sent 事件指的是网页自动获取来自服务器的更新。 以前也可能做到这一点，前提是网页不得不询问是否有可用的更新。通过服务器发送事件，更新能够自动到达。例子：Facebook/Twitter 更新、估价更新、新的博文、赛事结果等。 14. HTML5 WebSocket WebSocket是HTML5开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。当你获取 Web Socket 连接后，你可以通过 send() 方法来向服务器发送数据，并通过 onmessage 事件来接收服务器返回的数据。以下 API 用于创建 WebSocket 对象。 总结1. HTML5 浏览器支持 最新版本的 Safari、Chrome、Firefox 以及 Opera 支持某些 HTML5 特性。Internet Explorer 9 将支持某些 HTML5 特性。 2. 解决 HTML5 IE 浏览器以及老的浏览器兼容问题 注：不包括 IE8 及更早 IE 版本浏览器 1. 将 HTML5 元素定义为块元素 HTML5 定了 8 个新的 HTML 语义（semantic） 元素。所有这些元素都是 块级 元素。 为了能让旧版本的浏览器正确显示这些元素，你可以设置 CSS 的 display 属性值为 block。 实例 123header, section, footer, aside, nav, main, article, figure &#123; display: block; &#125; 2. 为 HTML 添加新元素 为 HTML 添加新的元素，该实例向 HTML 添加的新的元素，并为该元素定义样式，元素名为 。 实例 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt; &lt;title&gt;为 HTML 添加新元素&lt;/title&gt;&lt;script&gt; document.createElement("myHero")&lt;/script&gt;&lt;style&gt; myHero &#123; display: block; background-color: #ddd; padding: 50px; font-size: 30px; &#125;&lt;/style&gt; &lt;/head&gt;&lt;body&gt; &lt;h1&gt;我的第一个标题&lt;/h1&gt; &lt;p&gt;我的第一个段落。&lt;/p&gt; &lt;myHero&gt;我的第一个新元素&lt;/myHero&gt;&lt;/body&gt;&lt;/html&gt; 3. 参考 参考：[菜鸟教程][https://www.runoob.com/html/html5-intro.html]]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML之元素居中显示]]></title>
    <url>%2F2019%2F08%2F06%2FHTML%E4%B9%8B%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD%E6%98%BE%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[一个人真正的幸福并不是呆在光明之中，而是从远处凝望光明，朝它奔去，就在那拼命忘我的时间里，才有人生真正的充实。 元素居中显示 在我们日常布局中，经常会用到元素居中显示的效果，这节，我就来整理整理那些让元素居中的方法。 一般的，我们要将一个文本水平居中，可以给其text-align: center来达到居中效果，将一个文本竖直居中的话，我们给其行高，相应的，它会以行高的值进行竖直居中。但是，我们经常要将块级元素竖直水平居中，以下情况，主要就是针对块级元素将其居中。 一、利用 margin 实现居中显示 原理：利用其边距来达到居中效果 优点：这种方式适用于任何浏览器(IE7以上)，不需要考虑兼容问题 缺点：要居中元素相对于其父元素必须有固定宽高 代码如下： 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;元素居中&lt;/title&gt; &lt;style&gt; .box&#123; width: 200px; height: 200px; background: #7ccbfc; /*定位为绝对定位 absolute 跟 fixed 都行*/ position: absolute; /*position: fixed;*/ left: 50%; top: 50%; margin-left: -100px; margin-top: -100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="box"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 二、绝对定位 此方法类似于第一种 优点：可以兼容任何浏览器，并且不需要固定宽高，任意值都可以 代码如下： 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;元素居中&lt;/title&gt; &lt;style&gt; .box&#123; width: 200px; height: 200px; background: #7ccbfc; /*此处为position 跟fixed 都可以*/ position: absolute; /*position: fixed;*/ margin: auto; top: 0; left: 0; bottom: 0; right: 0; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="box"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 三、transform 实现居中显示 在这里，我们需要将要居中的元素开启绝对定位 translate(x,y) 括号的百分比数据，会以本身的长宽做参考，设置为原宽高的一半，一般情况下，设置为-50% 原理：设置其距离上左位置均为50%，但是我们的元素参考位置是左上角，所以只设置位置50%会向右下偏移其元素宽高的一半，因此，我们需要再让其向左上偏移元素宽高一半的值，就能达到让元素居中的效果。 优点：相比于第一种，优点就是不需要元素的宽高也可以让其居中 代码如下： 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;元素居中&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; .box&#123; position: absolute; width: 200px; height: 200px; background: #00acee; left: 50%; top: 50%; transform: translate( -50%, -50%); /*兼容Chrome、safari 浏览器*/ -webkit-transform: translate(-50%, -50%); /*兼容Firefox 浏览器*/ -moz-transform: translate(-50%, -50%); &#125; &lt;/style&gt;&lt;/head&gt; &lt;body&gt; &lt;div class="box"&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 四、添加伪元素（::before、::after）实现居中显示 使用此方法之前，先说说css里面的vertical-align 属性，虽然这个属性能达到垂直置中，但是是指元素内的所有元素垂直位置互相置中，并不是相对于父元素的高度垂直居中。也就是说只有左右居中。但是如果要居中的元素中有一个元素的高度变为父元素的100%，那么就会实现垂直居中。所以使用伪元素来让要居中元素有一个高度为父元素的100%的伪 元素。注意 ：div 一定要设置其属性 display: inline-block，因为vertical-align: middle是针对行内元素。 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;元素居中&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; .box&#123; height: 400px; width: 400px; border: 1px solid black; text-align: center; &#125; .box1&#123; width: 50px; height: 70px; background: yellowgreen; display: inline-block; vertical-align: middle; &#125; .box2&#123; width: 50px; height: 100px; background: #00acee; display: inline-block; vertical-align: middle; &#125; .box3&#123; width: 50px; height: 70px; background: blue; display: inline-block; vertical-align: middle; &#125; .box::before&#123; content: ''; height: 100%; display: inline-block; position: relative; vertical-align: middle; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="box"&gt; &lt;div class="box1"&gt;&lt;/div&gt; &lt;div class="box2"&gt;&lt;/div&gt; &lt;div class="box3"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 五、calc 动态计算实现居中显示 calc()支持CSS3；任何长度值都可以使用calc()函数进行计算 原理：利用calc() 函数的动态计算的能力，设置要居中元素的top值为50% - 50%的 div 高度，left值为50% - 50%的div高度。 代码如下： 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;元素居中&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; .box&#123; height: 400px; width: 400px; border: 1px solid black; &#125; .box1&#123; height: 100px; width: 100px; background: red; position: relative; top: calc(50% - 50px); left: calc(50% - 50px); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="box"&gt; &lt;div class="box1"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 六、使用表格或假装表格实现居中显示1. 表格居中显示 这种方法是直接在表格中利用行内元素直接水平竖直居中 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;元素居中&lt;/title&gt; &lt;style&gt; td&#123; width: 400px; height: 400px; border: 1px solid red; vertical-align: middle; background: yellowgreen; &#125; td div&#123; width: 100px; height: 100px; margin: 0 auto; color: #000; /*让其中字竖直居中*/ line-height: 100px; /*让其中字水平居中*/ text-align: center; background: #0c83e7; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;div&gt;表格居中&lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 2. 假装表格居中显示 这种方式主要是通过设置要居中元素的父元素的属性display: table-cell 注意：修改display的时候可能会影响其他样式，需要谨慎使用 代码如下： 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;元素居中&lt;/title&gt; &lt;style&gt; .box&#123; display: table-cell; width: 400px; height: 450px; border: 1px solid red; vertical-align: middle; &#125; .box div&#123; width: 120px; height: 80px; margin: 0 auto; color: #000; /*让其中洗竖直居中*/ line-height: 80px; /*让其中字水平居中*/ text-align: center; background: #0B61A4; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt; &lt;div&gt;假装为表格居中&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 七、使用 Flexbox 弹性布局实现居中显示 这个方法使元素居中是我们最常用的方式，弹性布局在移动端使用最多，因为大部分手机浏览器都支持这个方法。 原理：使用align-items 或者 align-content 的属性，轻松使元素居中显示。 代码如下： 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;元素居中五（Flexbox）&lt;/title&gt; &lt;style&gt; .box&#123; width: 400px; height: 400px; border: 1px solid black; display: flex; align-items: center; justify-content: center; &#125; .box div&#123; width: 100px; height: 50px; background: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="box"&gt; &lt;div&gt;要居中的元素&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 注：flexbox 布局的属性众多，后续会写一篇关于flex 的所有内容。如果有兴趣，可以去[阮一峰大佬的博客][http://www.ruanyifeng.com/home.html] 看有关flex 弹性布局的所有知识！！强烈推荐大佬博客！！ 结束语 自此，是我对于元素居中显示的只是总结整理。可能不全面，欢迎各位大佬指正！]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue 的学习之路（一）]]></title>
    <url>%2F2019%2F08%2F05%2FVue%20%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[一个人真正的智慧，是用积极的心态，专注于自己喜欢的事，别人怎么说，怎么看，都不重要，重要的是要活出自己。 Vue 的学习之路（一）！ 自学前端以来，听到最多的就是框架，今天就开始学习最火的框架 – Vue.js Vue 简介 Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。 (以上内容都是官网复制的！！！) 一、Vue 安装1. 直接用标签引入CDN 对于制作原型或学习 1&lt;script src="https://cdn.jsdelivr.net/npm/vue"&gt;&lt;/script&gt; 对于生产环境 1&lt;script src="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"&gt;&lt;/script&gt; NPM 用 Vue 构建大型应用时推荐使用 NPM 安装 1$ npm install vue 2. 直接下载本地引入 点击[Vue.js][http://www.puchao.cc/Vue.js ]下载 二、Vue创建第一个实例 先引入本地的Vue.js 或者使用外链引入 1234&lt;!--本地引入--&gt;&lt;script src="vue.js"&gt;&lt;/script&gt; &lt;!--外联引入--&gt;&lt;script src="https://cdn.jsdelivr.net/npm/vue"&gt;&lt;/script&gt; 创建HTML代码 1234567&lt;body&gt; &lt;!-- 创建数据显示区域 --&gt; &lt;div id="app"&gt; &lt;!-- 使用插值表达式来显示我们需要在此处显示的数据 --&gt; &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt; &lt;/div&gt;&lt;/body&gt; 创建自己的JavaScript代码,然后创建一个Vue对象 12345678&lt;script&gt; var vm = new Vue(&#123; el: '#app', // 此处为要控制的区域 ID为app的标签 data: &#123; // 此处为数据 msg: '欢迎学习Vue' //此处为要在标签中显示的信息 &#125; &#125;)&lt;/script&gt; 自此，第一个Vue简单实例完成，想想还是非常简单的 三、简单指令的学习1. v-cloak 指令的学习 作用：解决插值表达式的闪烁问题 当我们网速过慢时，插值表达式会显示在页面中，使用v-cloak可以解决此问题 HTML代码 12345&lt;body&gt; &lt;div id="app"&gt; &lt;p v-cloak&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt; &lt;/div&gt;&lt;/body&gt; Css 代码 123456&lt;style&gt; /* 此代码是为了解决插值表达是闪烁问题--&gt; */ [v-cloak]&#123; display: none; &#125;&lt;/style&gt; JavaScript代码 12345678&lt;script&gt; var vm = new Vue(&#123; el: '#app', data: &#123; msg: 'Vue学习之 v-cloak' &#125; &#125;)&lt;/script&gt; 2. v-text 指令的学习 作用：可以代替插值表达式 区别： ​ 1. 默认v-text没有闪烁问题 2. v-text会覆盖原来元素中的内容 HTML代码 12345&lt;body&gt; &lt;div id="app"&gt; &lt;p v-text="msg"&gt;--------&lt;/p&gt; &lt;/div&gt;&lt;/body&gt; JavaScript代码 12345678&lt;script&gt; var vm = new Vue(&#123; el: '#app', data: &#123; msg: 'Vue学习之 v-text' &#125; &#125;)&lt;/script&gt; 3. v-html 指令的学习 作用：可以解析msg中的HTML标签，也会覆盖原来元素中的内容 HTML代码 12345&lt;body&gt; &lt;div id="app"&gt; &lt;p v-html="msg"&gt;--------&lt;/p&gt; &lt;/div&gt;&lt;/body&gt; JavaScript代码 12345678&lt;script&gt; var vm = new Vue(&#123; el: '#app', data: &#123; msg: '&lt;h1&gt;Vue学习之 v-text&lt;/h1&gt;' &#125; &#125;)&lt;/script&gt; 4. v-bind 指令的学习 作用：Vue提供的用于绑定属性的指令 HTML代码 1234567&lt;body&gt; &lt;div id="app"&gt; &lt;input type="button" v-bind:title="mytitle" value="Enter"&gt; &lt;!-- 简写方式，可以省略v-bind--&gt; &lt;input type="button" :title="mytitle" value="Enter"&gt; &lt;/div&gt;&lt;/body&gt; JavaScript代码 12345678&lt;script&gt; var vm = new Vue(&#123; el: '#app', data: &#123; mytitle: '这是自定义的title' &#125; &#125;)&lt;/script&gt; 5. v-on 指令的学习 作用：Vue提供的用于绑定事件，JS常用的事件都可以绑定，例如click ，onmousover等，常用的还是click 注意：v-on指令要在新的方法 methods 中使用 HTML代码 123456&lt;body&gt; &lt;div id="app"&gt; &lt;!-- 此处的click可以为其他事件 --&gt; &lt;input type="button" value="Enter" v-on:click="show"&gt; &lt;/div&gt;&lt;/body&gt; JavaScript代码 12345678910&lt;script&gt; var vm = new Vue(&#123; el: '#app', methods: &#123; show: function () &#123; alert('Hello') &#125; &#125; &#125;)&lt;/script&gt; 四、本节中所有代码整合如下HTML + css + JavaScript代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Vue简单指令的学习&lt;/title&gt; &lt;script src="vue.js"&gt;&lt;/script&gt; &lt;style&gt; [v-cloak]&#123; display: none; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id="app"&gt; &lt;h2&gt;指令1：v-cloak解决插值表达式闪烁问题&lt;/h2&gt; &lt;p v-cloak&gt;-----&#123;&#123; msg &#125;&#125;-----&lt;/p&gt; &lt;h2&gt;指令2：v-text 也可以解决插值表达式闪烁问题，但是它会覆盖原来元素中的内容&lt;/h2&gt; &lt;p v-text="msg2"&gt;--------&lt;/p&gt; &lt;h2&gt;指令3：v-html 可以解析HTML标签&lt;/h2&gt; &lt;p v-html="msg3"&gt;--------&lt;/p&gt; &lt;h2&gt;指令4：v-bind 可以绑定属性&lt;/h2&gt; &lt;input type="button" v-bind:title="mytitle" value="Enter"&gt;&lt;/br&gt;&lt;!-- 简写方式，可以省略v-bind--&gt;&lt;!-- v-bind中可以写合法的JS表达式--&gt; &lt;h4&gt;指令4的简写方式 : &lt;/h4&gt; &lt;input type="button" :title="mytitle + '123'" value="Enter"&gt;&lt;/br&gt; &lt;h2&gt;指令5：v-on 用于绑定事件&lt;/h2&gt; &lt;input type="button" value="Enter" v-on:click="show"&gt;&lt;/br&gt; &lt;!--简写方式，可以将v-on替换为 @ 符号--&gt; &lt;h4&gt;指令5的简写方式 @ &lt;/h4&gt; &lt;input type="button" value="Enter" @click="show"&gt;&lt;/br&gt;&lt;/div&gt;&lt;/body&gt;&lt;script&gt; var vm = new Vue(&#123; el: '#app', data: &#123; msg: 'Vue学习之 v-cloak', msg2: 'Vue学习之 v-text', msg3: '&lt;h1&gt;Vue学习之 v-html&lt;/h1&gt;', mytitle: '这是自定义的title' &#125;, methods: &#123; show: function () &#123; alert('Hello') &#125; &#125; &#125;)&lt;/script&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML之清除浮动]]></title>
    <url>%2F2019%2F07%2F26%2FHTML%E4%B9%8B%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[愿你成为自己喜欢的样子，不抱怨，不将就，有野心，有光芒！ 在网页制作中，我们经常会用到浮动来布局，但是在之用浮动之后，会有一些新的问题出现，此时，我们就需要清除浮动。下面，我们就来讲讲常用的清除浮动的方式都有哪些。 一、在浮动元素的父元素中添加溢出隐藏*（注：如不加说明，此篇文章中的HTML代码都将以下为准！） HTML代码：1234567891011121314&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;HTML之清除浮动&lt;/title&gt; &lt;link rel="stylesheet" href="index.css"&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="box"&gt; &lt;div class="b1"&gt;&lt;/div&gt; &lt;div class="b2"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; CSS代码123456789101112131415161718192021222324*&#123; margin: 0; padding: 0; &#125;.b1&#123; width: 200px; height: 200px; background: #e67e22; float: left;&#125;.b2&#123; width: 200px; height: 200px; background: #44bd32; float: right;&#125;/* 清除浮动 *//* 给浮动元素的父元素添加溢出隐藏 */.box&#123; border: 2px solid blue; /* 溢出隐藏 */ overflow: hidden;&#125; 二、在浮动元素添最后添加一个空盒子（块元素），在给其设置清除浮动html代码12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;HTML之清除浮动&lt;/title&gt; &lt;link rel="stylesheet" href="index.css"&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="box"&gt; &lt;div class="b1"&gt;&lt;/div&gt; &lt;div class="b2"&gt;&lt;/div&gt; // 在此处添加一个空盒子 &lt;div class="clear"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; css代码1234567891011121314151617181920212223242526272829303132*&#123; margin: 0; padding: 0; &#125;.b1&#123; width: 200px; height: 200px; background: #e67e22; float: left;&#125;.b2&#123; width: 200px; height: 200px; background: #44bd32; float: right;&#125;.box&#123; border: 2px solid blue;&#125;/* 清除浮动 *//* * 在浮动元素添最后添加一个空盒子，设置其属性clear * clear有三个属性值： * 1.left 清除左浮动 * 2.right 清除右浮动 * 3.both 清除所有浮动 */.clear&#123; clear: both;&#125; 三、在二的基础上，利用伪元素 :before 和 :after 更多情况下，我们使用第三种方式，它跟第二种方式的区别就是：它只添加一个伪元素，没有改变源码。 css代码1234567891011121314151617181920212223242526*&#123; margin: 0; padding: 0; &#125;.b1&#123; width: 200px; height: 200px; background: #e67e22; float: left;&#125;.b2&#123; width: 200px; height: 200px; background: #44bd32; float: right;&#125;.box&#123; border: 2px solid blue;&#125;/* 清除浮动 */.box::after&#123; content: ''; /* 因为添加的伪类是一个行内元素，要将其转换成块元素 */ display: block; clear: both;&#125; ##]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript基础方法集合]]></title>
    <url>%2F2019%2F05%2F26%2F%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[谁有历经千辛万苦的意志，谁就能达到任何目的 一、查找、检索字符串1. indexOf() 方法 indexOf() 方法返回字符串中指定文本首次出现的位置。 实例 1234&gt;var str = "The full name of China is the People's Republic of China.";&gt;var pos = str.indexOf("China");&gt;// 返回 17 &gt; 123456789101112131415&gt;&lt;!--more--&gt;------### 2. `lastIndexOf()` 方法&gt; `lastIndexOf()` 方法返回置地文本在字符串**最后一次**出现的位置。&gt;&gt; ****实例****&gt; ```javascriptvar str = &quot;The full name of China is the People&apos;s Republic of China.&quot;;var pos = str.lastIndexOf(&quot;China&quot;);// 返回 51 注：如果未找到文本， indexOf() 和 lastIndexOf() 均返回 -1。 3. search() 方法 search() 方法搜索特定值的字符串，并返回匹配的位置。 与1 的区别：search() 方法可以设置更强大的搜索值（正则表达式）。 实例1234&gt; var str = "The full name of China is the People's Republic of China.";&gt; var pos = str.search("locate");&gt; // 返回 17 &gt; 12345678910111213------### 4. `charAt()` 方法&gt; `charAt()` 方法返回字符串中指定下标（位置）的字符串：&gt;&gt; ****实例****&gt; ```javascriptvar str = &quot;HELLO WORLD&quot;;str.charAt(0);// 返回 H 5.charCodeAt() 方法 charCodeAt() 方法返回字符串中指定索引的字符 Unicode 编码： 实例1234&gt; var str = "HELLO WORLD";&gt; str.charCodeAt(0); &gt; // 返回 72 &gt; 1234567891011121314151617181920212223### 注 ：&gt; 两种方法，`indexOf()` 与 `search()`，这两种方法是***不相等`***的。区别在于：&gt;&gt; - `search()` 方法无法设置第二个开始位置参数。&gt; - `indexOf()` 方法无法设置更强大的搜索值（正则表达式）。------## 二、分割提取部分字符串### 1. `slice()` 方法&gt; `slice()` 方法提取字符串的某个部分并在新字符串中返回被提取的部分。&gt;&gt; 该方法设置两个参数：起始索引（开始位置），终止索引（结束位置）。&gt;&gt; ****实例****&gt;```javascriptvar str = &quot;Apple, Banana, Mango&quot;;var res = str.slice(7,13);// 返回 Banana 如果某个参数为负，则从字符串的结尾开始计数:1234&gt; var str = "Apple, Banana, Mango";&gt; var res = str.slice(-13,-7);&gt; // 返回 Banana&gt; 12345&gt; 如果省略第二个参数，则该方法将裁剪字符串的剩余部分：​```javascriptvar str = &quot;Apple, Banana, Mango&quot;;var res = str.slice(-13,-7);// 返回 Banana, Mango 或者从结尾计数：1234&gt; var str = "Apple, Banana, Mango";&gt; var res = str.slice(-13,-7);&gt; // 返回 Banana, Mango &gt; 12345678910111213&gt; 注：负值位置不适用 Internet Explorer 8 及其更早版本。------### 2.`substring()` 方法&gt; `substring()` 类似于 `slice()`。不同之处在于 substring() 无法接受负的索引。&gt;&gt; ****实例****&gt; ```javascriptvar str = &quot;Apple, Banana, Mango&quot;;var res = str.substring(7,13);// 返回 Banana 如果省略第二个参数，则该 substring() 将裁剪字符串的剩余部分。 3.substr() 方法 substr() 类似于 slice()。不同之处在于第二个参数规定被提取部分的长度。 实例1234&gt; var str = "Apple, Banana, Mango";&gt; var res = str.substr(7,6);&gt; // 返回 Banana&gt; 1234567891011121314151617&gt; 如果省略第二个参数，则该 `substr()` 将裁剪字符串的剩余部分。&gt; 如果首个参数为负，则从字符串的结尾计算位置。&gt; 第二个参数不能为负，因为它定义的是长度。------## 三、替换字符串内容### 1. `replace()`方法&gt; `replace()` 方法用另一个值替换在字符串中指定的值：&gt;&gt; 一共两个参数，第一个是要替换的字符串，第二个是想要替换的结果&gt;&gt; ****实例****&gt; ```javascriptstr = &quot;Please visit Microsoft and Microsoft and MICROSOFT!&quot;;var n = str.replace(&quot;Microsoft&quot;, &quot;W3School&quot;);// 得到 n = Please visit W3School and Microsoft and MICROSOFT! replace() 方法不会改变调用它的字符串。它返回的是新字符串。默认地，replace() 只替换首个匹配, replace() 对大小写敏感。 四、转换为大写和小写1. toUpperCase() 方法 通过 toUpperCase() 把字符串转换为大写： 实例1234&gt; var text1 = "Hello World!";&gt; var text2 = text1.toUpperCase(); &gt; // 得到 text = "HELLO WORLD!"&gt; 12345678910111213------### 2.`toLowerCase()` 方法&gt; 通过 `toLowerCase()` 把字符串转换为小写：&gt;&gt; ****实例**** &gt; ```javascriptvar text1 = &quot;Hello World!&quot;;var text2 = text1.toLowerCase();// 得到 text2 = &quot;hello world!&quot; 五、字符串的格式化1. concat() 方法 concat() 连接两个或多个字符串： 实例12345&gt; var text1 = "Hello";&gt; var text2 = "World";&gt; text3 = text1.concat(" ",text2,"!");&gt; // 得到text3 = "Hello World!"&gt; 1234567891011121314------### 2. `trim()`方式&gt; `trim()` 方法删除字符串两端的空白符：&gt;&gt; ****实例****&gt;&gt;```javascriptvar str = &quot; Hello World! &quot;;alert(str.trim());// 返回 &quot;Hello world!&quot; 注：Internet Explorer 8 或更低版本不支持 trim() 方法。 六、把字符串转换为数组1.split()方法 可以通过 split() 将字符串转换为数组： 实例12345&gt; var txt = "a,b,c,d,e";&gt; txt.split(","); // 用逗号分隔&gt; txt.split(" "); // 用空格分隔&gt; txt.split("|"); // 用竖线分隔&gt; 123&gt; 如果省略分隔符，被返回的数组将包含 index [0] 中的整个字符串。------]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文学收录]]></title>
    <url>%2F2019%2F05%2F21%2F%E5%90%8D%E8%A8%80%E8%AD%A6%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[宁愿花时间修炼不完美的自己，也不要浪费时间期待完美的别人 名言警句收录正能量 我们都得经历一段努力闭嘴不抱怨的时光，才能熠熠生辉，才能去更酷的地方，成为更酷的人。 没有有白费的努力，也没有碰巧的成功。只要认真对待生活，终有一天，你的每一份努力，都将绚烂成花 成功的机会是人人平等，失败的几率却有所不同。 人格是做人的品牌。人格如金，纯度越高，品位越高。做人一辈子，人品做底子。看看不同的风景，接触不同的人和事。 有句话说的好，不打没有准备的仗，做事之前要修炼自己，有能力才会有魄力，有魄力才会有勇气，有这样的胆色才能把能力发挥到极致，那么你就成功了！ 懒惰是很奇怪的东西，它使你以为那是安逸，是休息，是福气。但实际上它给你的是无聊，是倦怠，是消沉。 无论生活中还是工作中，我们很难事事顺心，但我们可以做到事事尽心。很多时候，一件事情、一份工作能否做好，往往取决于我们的态度，积极的态度就是成功的保证。认真细致、尽心尽力的去做每一件事，这样我们才能收获惊喜、成长自己。 宁愿花时间修炼不完美的自己，也不要浪费时间期待完美的别人。 一个人真正的智慧，是用积极的心态，专注于自己喜欢的事，别人怎么说，怎么看，都不重要，重要的是要活出自己。 愿你成为自己喜欢的样子，不抱怨，不将就，有野心，有光芒！ 要永远坚信这一点：一切都会变的，无论受多大创伤心情多么沉重，一贫如洗也好，都要坚持住。太阳落了还会升起，不幸的日子总会有尽头，过去是这样，将来也是这样。 用笑脸去面对现实，用微笑去对待生活！人生是一场孤旅。你就是你，世上再没有第二个。世上只有相似的人，没有完全相同的人。无论是走在人群中，还是只身站在旷野里，你都要承担起只有你才有的一切。 生活就是一场修行，修自己的耐心、恒心、平常心。人生，就是一边拥有，一边失去；一边选择，一边放弃。今天陌生的，是昨天熟悉的；现在记住的，是以后淡忘的。不是人生选择了你，而是你选择了人生。 其实人一生的需求很简单：温暖的家、贴心的伴侣。要有快乐的时光，还要有一点点笨笨的信念。当然，最好能有一个强调感恩的信仰。这样身体和心灵就不会孤单了。谦和是一种智慧，懂得谦卑的人，必将得到尊重。 做一个有个性的人，给自己一点自信！ 成功的道路靠自己闯，美好的前途来自于自强自立， 不屈服于任何权威，用自我的努力找到属于你的自尊。 不懂得“俭”字的人，不知道如何成功，任何成功的事业都在于点滴的积累； 不懂得“俭”字的人，只会丧失成功，过分的骄奢多败人品质。 别再问我工作何必这么拼，我之所以这么努力，因为我想要的生活比你的贵。 一个人真正的幸福并不是呆在光明之中，而是从远处凝望光明，朝它奔去，就在那拼命忘我的时间里，才有人生真正的充实。 每一日所付出的代价都比前一日高，因为你的生命又消短了一天，所以每一日都要更积极。今天太宝贵，不应该为酸苦的忧虑和辛涩的悔恨所销蚀，抬起下巴，抓住今天，它不再回来。 不要再埋怨命运，以感恩的心态面对生活，人生最怕什么都想计较，却又什么都抓不牢。失去的风景，走散的人，等不来的渴望，全都住在缘分的尽头。何必太执着，该来的自然来，会走的留不住。放开执念，随缘是最好的生活。 哲学 这是极为特殊的历史转折期，物质文明发展到这一步注定了精神（信仰）的缺失，灵魂空虚、物欲横流，人们的精神堕入虚无主义，只能沉浸在金钱物质欲望和肉体感官刺激中，有各种不安和痛苦。多少年轻人也失去了纯真的理想和纯美的爱情。这绝不仅是我们这个星球上的生命的悲剧，而是任何一种生命在文明发展进程中注定的悲哀。生命的意义到底是什么？我们到底该怎样活着？——《重大人生启示录 前言》 人生就是由欲望不满足而痛苦和满足之后无趣这两者所构成。你满心期待着未来的某个快乐，未必理智认知到了它是短暂的而不会持久。人的一生的本质是痛苦，快乐只是昙花一现。 我们总害怕死亡，而如果人真的可以永远活着，我想人们同样会像害怕死亡一样害怕永恒，或厌倦永恒。 人们总爱追问人生的意义，其实人生本无所谓意义，因为存在先于本质，本质之前的存在是禁绝思考的。人生的无意义赋予了人的自由，倘若人生有一个注定的意义，那么人人都如同一具机器。 我们诞生在这个世界是被迫的，这是最糟糕的事实。一种理想主义的人生观是：生命的长度无需受制于肉体自然的衰败，它应该是受你的心灵、你的快乐的需要而去自主选择。 其实这个世界只有“我”，这个世界是我所创造的，这是我的世界，我是孤独的王者，我能感觉全世界都是忧伤的，也能感知全世界都是快乐的。我若死去，我的世界也会崩塌寂灭。 每个人都没有绝对的道德底线，只是诱惑不够。也没有任何一个人能经受得住集体的道德审判。我们要学会宽容，像谅解自己一样谅解别人。 我们可以对两个或以上的异性付出我们的爱情吗？当然可以。只要这爱情是纯洁的。 如果一个女子（男子）貌美，我们都会爱上，如果这就是爱情，这爱是多么脆弱、经不起推敲，于是这爱的热情是多么虚伪。 一个没有高贵精神世界的人不足以谈真爱，真爱是灵魂层次发生的事情，多数人并没有灵魂。一个有灵魂的人是觉醒的，它必然时刻领悟到他（她）和他（她）所爱的那个人都是宇宙中孤独的生命，他（她）对她（他）的孤独有着深深的悲悯和同情。 生命 今天就是生命，是唯一你能确知的生命。 人的一生应当这样度过：当回忆往事的时候，他不至于因为虚度年华而痛悔，也不至于因为过去的碌碌无为而羞愧；在临死的时候，他能够说：“我的整个生命和全部精力，都已经献给世界上最壮丽的事业－－为人类的解放而斗争。” 人生最终的价值在于觉醒和思考的能力，而不只在于生存。 在命运的颠沛中，最可以看出人们的气节。 人生是各种不同的变故、循环不已的痛苦和欢乐组成的。那种永远不变的蓝天只存在于心灵中间，向现实的人生去要求未免是奢望。 勤劳远比黄金可贵。 自己活着，就是为了使别人活得更美好。 谁要是游戏人生，他就一事无成；谁不能主宰自己，永远是一个奴隶。 希望是附丽于存在的，有存在，便有希望，有希望 ，便是光明。 人间没有永恒的夜晚，世界没有永恒的冬天。 人生 人生的价值，即以其人对于当代所做的工作为尺度。 人生如蜡烛一样，从顶燃到底，一直都是光明的。 人生就像弈棋，一步失误，全盘皆输。 人生天地之间，若白驹之过隙，忽然而已。 人生意义的大小，不在乎外界的变迁，而在乎内心的经验。 人生的意义就在这个过程上。你要细细体认和玩味这个过程中的每节，无论它是一节黄金或一节铁；你要认识每节的充分价值。 人生照例是一场值得一搏的争衡，然而它的奖品是拼斗。 人生是伟大的宝藏，我晓得从这个宝藏里选取最珍贵的珠宝。 人生不售来回票，一旦动身，绝不能复返。 人生是个舞台，所以你得学会演好自己的角色。 人生像一本书，愚人哗啦哗啦地翻它，而贤者潜心细读。 人生好像一盒火柴，严禁使用是愚蠢的，滥用则是危险的。 人的一生是短暂的，但如果卑劣地度过一生，就太长了。[ 人的前路充满快乐，而且非常值得行走。但这只能有一次。 人生的大悲剧不是人们的死亡，而是他们不再爱人。 人们自古以来，在这条路上行走，然而，这条路确实是坎坷不平、逶迤曲折、无边无际的，它具有无数分支，充满着欢乐、痛苦、艰险，但这就是人生的道路。泰戈尔 人生是由各种不同的变故、循环不已的痛苦和欢乐组成的。那种永远不变的蓝天只存在于心灵中，向现实的人生去要求未免是奢望。 友谊 患难见真情。 朋友丰富人生。 友谊是心灵的结合。 友谊永远是美德的辅佐。 友谊使欢乐倍增，悲痛锐减。 友谊是一棵可以庇荫的树。 友谊是一种和谐的平等。 朋友一直都是我们的另一半。 仇恨终将泯灭，友谊万古长青。 真金不怕火炼，患难考验友谊。 要结识朋友，自己得先是个朋友。 友情的语言，不是文字，而是意义。 友谊是一个神圣而又古老的名字。 谅解、支援和友谊，比什么都重要。 患难之中的友谊，能够使患难舒缓。 励志 勤奋工作，勇于实践；始终坚持学习；做一个有德行的人；富有创新精神。 有了坚定的意志，就等于给双脚添了一双翅膀。 谁有历经千辛万苦的意志，谁就能达到任何目的。 衰莫大于心死，愁莫大于无志。 尽管我们用判断力思考问题，但最终解决问题的还是意志，而不才智。 万事皆由人的意志创造。 理想是指路明灯。没有理想，就没有坚定的方向，没有方向，没有生活。 意志是每一个人的精神力量，是要创造或是破坏某种东西的自由的憧憬，是能从无中创造奇迹的创造力。 忍耐和坚持虽是痛苦的事情，但却能渐渐地为你带来好处。 人之所以平凡，在于无法超越自己。 只有不断找寻机会的人才会及时把握机会。 人生成功的秘诀是当好机会来临时，立刻抓住它。 投资知识是明智的，投资网络中的知识就更加明智。 如果我们都去做自己能力做得到的事，我们真会叫自己大吃一惊。 成功需要成本，时间也是一种成本，对时间的珍惜就是对成本的节约。 行动是治愈恐惧的良药，而犹豫拖延将不断滋养恐惧。 每一个成功者都有一个开始。勇于开始，才能找到成功的路。 本来无望的事，大胆尝试，往往能成功。 才华是血汗的结晶。才华是刀刃，辛苦是磨刀石。 不要因为怕被玫瑰的刺伤到你，就不敢去摘玫瑰。 困难里包含着胜利，失败里孕育着成功。 大胆的尝试只等于成功的一半。 世上最重要的事，不在于我们在何处，而在于我们朝着什么方向走。 忙于采集的蜜蜂，无暇在人前高谈阔论。 如果你想攀登高峰，切莫把彩虹当作梯子。 树苗如果因为怕痛而拒绝修剪,那就永远不会成材。 行动不一定带来快乐，而无行动则决无快乐。 一个人是在对周围生活环境的反抗中创造成功的。 在一个崇高的目的支持下，不停地工作，即使慢、也一定会获得成功。 上游，是勇士劈风破浪的终点；下游，是懦夫一帆风顺的归宿。 生命之灯因热情而点燃，生命之舟因拼搏而前行。 英雄的事业必定包含着艰险，如果没有艰险也就不成为英雄了。 忍别人所不能忍的痛，吃别人所不能吃的苦，方能收获别人所得不到的收获。 拥有梦想只是一种智力，实现梦想才是一种能力。 无论才能知识多么卓着，如果缺乏热情，则无异纸上画饼充饥，无补于事。 你可以选择这样的“三心二意”：信心恒心决心；创意乐意。名言警句大全 征服畏惧建立自信的最快最确实的方法，就是去做你害怕的事，直到你获得成功的经验。 现实是此岸，成功是彼岸，中间隔着湍急的河流，兴趣便是河上的桥，只要行动就可以通过。 成功是优点的发挥，失败是缺点的累积。走对了路的原因只有一种，走错了路的原因却有很多。 学习 青年最主要的任务是学习。 青年人首先要树雄心，立大志，其次就要决心为国家、人民作一个有用的人才;为此就要选择一个奋斗的目标来努力学习和实践。 凡看书不为书所愚始善。 青年最主要的任务是学习。 读书是学习，摘抄是整理，写作是创造。 青年是学习智慧的时期，中年是付诸实践的时期。 学习有如母亲一般慈爱，它用纯洁和温柔的欢乐来哺育孩子，如果向它要求额外的报酬，也许就是罪过。]]></content>
      <categories>
        <category>文学</category>
      </categories>
      <tags>
        <tag>名人名言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3小特效之加载动画效果]]></title>
    <url>%2F2019%2F05%2F19%2FCSS3%E5%B0%8F%E7%89%B9%E6%95%88%E4%B9%8B%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[凡看书不为书所愚始善 加载动画效果 很多情况下，我们需要一个加载动画作为调用数据时的小特效，用来美化我们的页面！今天，就学习练习写一个这样的好看的加载动画！ HTML代码如下 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;加载动画效果&lt;/title&gt; &lt;link rel="stylesheet" href="index.css"&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt; &lt;div class="loading"&gt; &lt;span&gt;Loading...&lt;/span&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; CSS代码如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465*&#123; margin: 0; padding: 0;&#125;.box&#123; /*设置窗体颜色*/ background-color: #2980b9; /*设置body的高为全窗口*/ height: 100vh; /*弹性布局让元素居中显示*/ display: flex; align-items: center; justify-content: center;&#125;.loading&#123; width: 200px; height: 200px; box-sizing: border-box; /*将正方形div变为一个圆环，宽为10px，只显示顶部*/ border-radius: 50%; border-top: 10px solid #f1c40f; position: relative; /*给圆环添加一个旋转动画*/ animation: rotate1 2s linear infinite;&#125;/*利用::before和::after添加灵位两个边框，形成一整个封闭的圆环*/.loading::before,.loading::after&#123; content: ''; width: 200px; height: 200px; position: absolute; left: 0; top: -10px; box-sizing: border-box; border-radius: 50%;&#125;.loading::before&#123; border-top: 10px solid #9b59b6; transform: rotate(120deg);&#125;.loading::after&#123; border-top: 10px solid #2ecc71; transform: rotate(240deg);&#125;.loading span&#123; position: absolute; width: 200px; height: 200px; color: #fff; font-size: 24px; text-align: center; line-height: 200px; animation: rotate2 2s linear infinite;&#125;@keyframes rotate1 &#123; to&#123; transform: rotate(360deg); &#125;&#125;/*给span添加一个反向旋转的动画，正好让内容'Loading...'看起来不旋转，但是能跳动*/@keyframes rotate2 &#123; to&#123; transform: rotate(-360deg); &#125;&#125; 效果如下]]></content>
      <categories>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3小特效之动态滑动登录框]]></title>
    <url>%2F2019%2F05%2F19%2FCSS3%E5%B0%8F%E7%89%B9%E6%95%88%E4%B9%8B%E5%8A%A8%E6%80%81%E6%BB%91%E5%8A%A8%E7%99%BB%E5%BD%95%E6%A1%86%2F</url>
    <content type="text"><![CDATA[万事皆由人的意志创造 动态滑动登录框 我们在做一些电商网站或者是其他需要用户登录的页面时，往往需要做出一个精美的登录框，这样用户体验总是比较舒适的。那么，今天我们就来做一个好看的动态滑动登录框。 HTML代码 12]]></content>
      <categories>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[域名申请之阿里云]]></title>
    <url>%2F2018%2F12%2F26%2F%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7%2F</url>
    <content type="text"><![CDATA[人之所以平凡，在于无法超越自己 今天给大家分享一下阿里云域名申请以及注册的超详细步骤！！都是个人经验。那说说为什么要申请域名呢？ 1、当初上大学刚刚接触前端在学习的时候，写了自己的第一个页面，很是开心，想跟朋友家人分享一下，然后，我就问老师，怎样才能在别人的手机或者电脑上看到我做的网页呢？然后老师来了一顿花里胡哨的骚操作，手机拿出来扫描二维码！咦！我做的网页在我的手机上看见了！于是乎，我就开始QQ微信分享！！2、有一个自己的域名方便啊，我们现在做的blog，就是用我自己的域名访问。3、搭配一个服务器或者是虚拟主机可以将自己做过的项目网页上传，随时随地查看，万一哪天忘了个啥，可以打开浏览器查看呐！！4、就当是装逼好了！！ 今天我们演示的是阿里云的域名申请。至于为什么选择阿里云呢，那就得问马云爸爸了！！因为他牛逼啊！！！好吧，其实是因为当初选择的时候也不知道为什么就选择了阿里云，可能是因为用支付宝方便！ 首先，咱们打开阿里云，免费注册一个账号，也可以用支付宝直接扫码登录，如图依次选择[左上角三杠] –&gt;[产品]–&gt;[精选]–&gt;[域名注册] 然后再这里面输入你想要的域名，比如：niubi 再点击搜索框后面的查域名 会出现以下信息 在这里面选择自己喜欢（买得起）的后缀域名，比如选择niubi.org，点[立即购买]，以下操作就付钱就OK了，在这也就不演示了。 购买成功之后，点击右上角控制台，进入到这个页面 点击[我的云产品]–&gt;[域名]，就可以看到刚刚你买的域名了！到此呢，我们的域名购买也就结束了。下一篇我们讲域名备案，为什么要域名备案呢？？因为这是我们国家法律规定！！！]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人博客--基于HEXO + Git + github搭建个人博客]]></title>
    <url>%2F2018%2F12%2F03%2F%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[惶者才能生存,偏执才能成功。 搭建个人博客不是很难，完全免费，若要逼格高一点的话，可以花一点小钱，买一个域名。 相信很多计算机专业的道友们都想有一个属于自己的博客吧（至少我在此之前很想），本文将带领大家搭建一个属于自己的博客！虽然网上有很多教程，但是我在自己做的时候就莫名其妙的跳过好多坑！!经过不懈的努力，终于大功告成！个人目前还是很满意的！ 申明：本教程仅仅针对windows用户！！ 目录安装软件Git安装Hexo安装NodeJs安装更该主题github注册账号注册创建仓库上传到仓库域名申请域名绑定Page服务正文Git安装 根据自己电脑系统下载安装git，安装就选择傻瓜式安装。如果想学习更多git，点击Git教程，本文仅用到不多的几条命令！ NodeJs安装 下载安装NodeJs,推荐下载左面稳定版！这是NodeJs简介。 推荐下载安装到D盘，记住安装路径，一般情况下安装目录为D:\Program Files\nodejs\ 安装完成后按Win+R，输入cmd打开控制台输入一下代码检查安装是否正确完成：12node -vnpm -v 出现以下情况则表示正确安装 Hexo安装 在任意一个地方新建一个文件夹，命名为“blog”作为我们的博客的本地文件，比如我是在E盘根目录下键的。 打开文件夹，鼠标右键选择“Git Bash Here”，打开git控制台，输入命令开始安装1npm install -g hexo-cli #安装hexo脚手架 出现下图内容，表示安装正确 1hexo init #Hexo自动在当前文件夹下下载搭建网站所需的所有文件 出现下图内容，表示安装正确 1npm install #安装依赖包 出现下图内容，表示安装正确 到此为止，如果一路顺利，那么恭喜你，你的个人博客已经生成！1hexo g #完整命令为hexo generate，生成静态文件 出现下图内容，表示安装正确 接下来就是本地预览你的博客！1hexo s #完整命令为hexo server，启动服务器，用来本地预览 此时，我们的博客是不怎么美光，接下来我们给它换个主题。在刚刚的git控制台里面输入代码以下代码，下载theme主题。在此之前，需要按住 “ctrl+c”停止服务器。1git clone https://github.com/iissnan/hexo-theme-next themes/next 打开E:\hexo，用你喜欢的编程软件打开 _config.yml 文件，ctrl+f 搜索 theme 关键字，修改为以下代码1theme: next github注册 现在我们的博客仅仅在本地运行，接下来我们就要将它上传的互联网，让小伙伴们观赏我们的博客！ 注册账号 如果你有github账号，可以直接跳过这一步。github官网。 在此处填写信息注册github账号。 创建仓库 1.点击 “new repository” 按钮创建一个新的仓库 2.你仓库的名字必须是你的github的名字+ .github.io 比如我的 github 名字是 Dylan1201，那么我的仓库名字就是 Dylan1201.github.io下面的public也要选中 由于我已经创建了一个该名字的仓库，所以不能创建第二个，所以ta给我提示红色框里面的东西。然后点击 “Creating repository” 按钮完成创建。 配置SSH 继续在git里面提交代码 ssh-keygen -t rsa -C &quot;你的邮件地址&quot;,引号里面的内容输入你的邮箱地址，然后回车，会提示你文件保存的路径，这时候按回车键确认，然后会提示你输入密码，输入即可（输入密码是看不到的），然后会确认输入一次，就可以在刚刚的路径看到生成了两个文件，一个是id_rsa，另一个是id_rsa.pub，用sublime打开id_rsa.pub然后选中里面的全部内容，复制下来。打开github，点击右上角小图标，选择 “settings” 按钮。 在左面菜单栏中选择 “SSH and GPG keys” 按钮，再点击 “new SSH key” 按钮，“title” 随意填写，将刚刚赋值的代码粘贴到“key”中，然后点击 “add SSH key” 按钮完成公钥添加。 上传到仓库 打开E:\hexo，用你喜欢的编程软件打开_config.yml文件，文件最后可以看到 12deploy: type: 修改为一下内容，主意，将连接修改为你的连接1234deploy: type: git repository: git@github.com:yourname/yourname.github.io.git #发布到github branch: master 在E:/blog 根目录下右键打开“Gti Bash here”，输入以下命令1hexo d &amp;&amp; hexo g 如果出现以下提示1ERROR Deployer not found: git 输入以下命令,然后再输入上面的命令 1npm install hexo-deployer-git --save 这时候如果弹出一个对话框，输入在github上面的用户名和密码即可。现在我们就可以在浏览器中输入网址：https://yourname.github.io 来查看自己的博客了。 域名申请，请看我的另一篇文章，此处火箭直达！(这也是搭建个人博客唯一需要花钱的地方)域名绑定Page服务 解析一个你喜欢的域名，比如www.123abc.或者blog.123abc.com,然后打开github你刚刚创建的仓库，点击上面的 “settings” 按钮在下面找到“GitHub Pages”，在这个地方添加你解析的域名保存即可。现在你就可以访问域名来访问你的博客了！！]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 好用软件]]></title>
    <url>%2F2018%2F11%2F13%2F%E7%94%B5%E8%84%91%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[只有不断找寻机会的人才会及时把握机会 电脑杀毒软件(持续更新-ing)火绒 很多人电脑里面安装360、电脑管家、瑞星、百度、金山卫士，甚至有些人安装好几个，还说电脑卡！这些个杀毒软件彼此之间干架，占用大量的CPU，请问怎么会不卡？？我个人有360洁癖！只要是360公司的软件，我都不会使用！更别说在电脑安装360的软件了，在我看来，360简直就是流氓垃圾！我推荐火绒这个软件，个人版免费，不会乱篡改任何东西，甚至外来软件安装都会请求同意，真的是业界良心软件！ 下载软件IDM 一提到Windows下载软件，大多数人第一个想到的应该就是迅雷了吧，在那个久远的年代，市面上下载软件很多，电驴、QQ旋风、快播（手动滑稽）维棠等好多，迅雷之势其中一个，到现在活下来的并且为大众所知道的，可能就剩迅雷了，虽然免费，但是那个下载速度，真的不想过多的diss，不开会员，下载个蓝光美国大片，最快也就是3MB/秒，下载是真的慢！作为学生党，生活费本就不多，一个月20左右的VIP（土豪绕道而行），虽然不是很贵，但是也没有天天使用，很不划算，所以市面上有各种破解版，但是大多都没啥用。今天我向大家推荐一款非常好用的能够替代迅雷的下载器！IDM(Internet Download Manager)。具体使用方法自行百度！ 截屏软件Snipaste 说到截屏软件，大家立即会想到QQ截屏，QQ截屏确实在很多情况下帮助我们解决了很多的问题，但是总归它还是不方便，有些功能不是很完善。今天我要介绍的是一个全新的截屏工具–Snipaste，这个软件的强大之处真的很多，我就不一一说了，我所用到的它的最大的功能，就是贴图，真的很方便！！并且，这款软件免费使用！！支持Windows，Mac！这真的是我用过的最好用的截屏软件，没有之一！！ GIF录制软件ScreenToGif 前几天，由于某种需求，我需要录制一个gif动图，所以直接上百度搜了一个gif录制软件，下载安装后开始录制，一切顺利，当录制完我打开查看图片时，右上角出现了一个比我头还大的水印！！我心想着，要不用PS处理一下，PS打开一看，48张！！顿时不想弄了。然后开始了寻找gif录制工具。经过几分钟的折腾，发现了一款良心软件—ScreenToGif.好处我不多讲，废话也够了（其实是字数凑够了！），需要的小伙伴直接下载吧！！]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>软件工具</tag>
      </tags>
  </entry>
</search>
